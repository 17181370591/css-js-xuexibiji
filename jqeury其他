jquery获取元素坐标位置的两种方法：
1、获取元素在文档中的位置:
  var X = $('#DivID').offset().top; 
  var Y = $('#DivID').offset().left; 
2、获取相对(父元素)位置: 
  var X = $('#DivID').position().top; 
  var Y = $('#DivID').position().left; 

3,//获取鼠标位置
    $(function(){
        $('body').mousemove(function(e) {
            __xx = e.pageX;
            __yy = e.pageY;
        });
    });

4,box-sizing: content-box|border-box|inherit;
content-box	:宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。
border-box：为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。
通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。
inherit：规定应从父元素继承 box-sizing 属性的值。

5，offset（）是到document的距离，即坐标。position（）是到有position属性的祖先元素的距离 （fixed，absolute。relative都可以）；
  使用position()方法时事实上是把该元素当绝对定位来处理，获取的是该元素相当于最近的一个拥有绝对或者相对定位的父元素的偏移位置 
  width（）不带单位，css('width')带单位

6，            $(e.target).parent().find('input').val(1).change()
            /*这里直接给input text修改val不会触发change时间，所以change（）触发*/

7,$(window).height()和$(document).height()的区别

    jQuery(window).height()代表了当前可见区域的大小，
     jQuery(document).height()则代表了整个文档的高度，可视具体情况使用.

    注意：当浏览器窗口大小改变时(如最大化或拉大窗口后) ，
     jQuery(window).height() 随之改变，但是          /*chrome下测试有误*/
     jQuery(document).height()是不变的。               /*chrome下测试有误*/
     
8,$(document).ready(function(){})可以简写成$(function(){});
 
9,jquery关于transform的动画：
  方法1：.css（）
  方法2：.toggleClass('ss')
  都是提前设置好transition里的时间
      $(document).click(function () {
        $(':submit').css({'transform':'rotate(33deg)'});setTimeout("$(':submit').val(' f f')",2000)   /*方法1*/
        $(':submit').toggleClass('ss');                           /*方法2*/
    });

10.float元素寻找其上一个兄弟元素，并在左边有空间是保持高度左浮动

11,Math.min(1,2,3),math.min不能作用于数组，Math.min.apply(null,new Array(1,2,3))可以。
第一个参数是null的情况下，this指向window,调用全局函数Math.min()方法。求出最小值

12，两个网址协议(http)，子域名(www)，主域名(baidu)，端口号(8080)任意一个不同时，都算不同域，相互请求资源都算跨域

13，line-height撑开div的高度，在最外边的div设置line-height，内部所有块级元素就会得到最低高度，非常重要！

14，visibility:hidden隐藏元素后，该元素的位置不会改变，不会被其他元素填充，display:none则会被填充。opacoty:0的元素依旧可以触发事件，
例如被点击。不管用什么方法隐藏，document里依旧可以找到该元素。（这里指计算index时会被计入）

============================================================================================================================

当设计一个页面时，你在里面放置了一个div元素，你希望它占满整个窗口高度，最自然的做法，你会给这个div添加height: 100%;的css属性。
然而，如果你要是设置宽度为width: 100%;，那这个元素的宽度会立刻扩展到窗口的整个横向宽度。高度也会这样吗？

错。

为了理解为什么不会，你需要理解浏览器是如何计算高度和宽度的。Web浏览器在计算有效宽度时会考虑浏览器窗口的打开宽度。
如果你不给宽度设定任何缺省值，那浏览器会自动将页面内容平铺填满整个横向宽度。

但是高度的计算方式完全不一样。事实上，浏览器根本就不计算内容的高度，除非内容超出了视窗范围(导致滚动条出现)。
或者你给整个页面设置一个绝对高度。否则，浏览器就会简单的让内容往下堆砌，页面的高度根本就无需考虑。

因为页面并没有缺省的高度值，所以，当你让一个元素的高度设定为百分比高度时，无法根据获取父元素的高度，也就无法计算自己的高度。
换句话说，父元素的高度只是一个缺省值：height: auto;。当你要求浏览器根据这样一个缺省值来计算百分比高度时，只能得到undefined的结果。
也就是一个null值，浏览器不会对这个值有任何的反应。 所以，使height:100%生效的根本解决办法就是父级一定要有显式定义的高度


============================================================================================================================

如果用来设置宽和高等非字体尺寸，则以百分比为单位的长度值是基于具有相同属性的父元素的长度值。

何为父元素，相对定位（relative），绝对定位（absolute），浮动（float），固定（fixed）中如何找寻父元素？
1.相对定位元素，它的父元素符合标签嵌套。
2.绝对定位元素，它的父元素是离它最近的定位元素（绝对定位，相对定位，固定，但不包括浮动）或者视窗尺寸（没找到定位元素时）。
3.浮动元素，它的父元素也符合标签嵌套。
4.固定元素（特殊的绝对定位），它的父元素是视窗（浏览器默认用来展示内容的区域的尺寸，不是html 或body 的尺寸）。

<!DOCTYPE HTML>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>响</title>
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <script src="https://www.imooc.com/static/lib/jquery/1.9.1/jquery.js"></script>
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <style>body { padding: 100px;}</style>
</head>
<body>
<div style="margin:0 500px;width:300px;height:300px;border:1px solid #f00;position: absolute">
    <div style="width:200px;height:200px;border:1px solid #ff0;">
        <div style="width:100px;height:100px;border:1px solid #f00;position: relative;right:100%;">
        </div>
    </div>
</div>
</body>
</html>


============================================================================================================================

jQuery事件命名空间

jQuery支持事件命名空间，以方便事件管理。例如，在下面的示例中，为div元素绑定多个事件类型，然后使用命名空间进行规范，从而方便管理。
所谓事件命名空间，就晨事件类型后面以点语法附加一个别名，以便引用事件，如”click.a”，其中”a”就是click当前事件类型的别名，即事件命名空间
如：$(“div”).bind(“click.a”,function(){});
$(“div”).bind(“dbclick.a”,function(){});
$(“div”).bind(“mouseover.a”,function(){});
$(“div”).bind(“mouseout.a”,function(){});
若在所有绑定的事件类型后面附加命名空间，这样在删除事件时，就可以直接指定命名空间。如$(“div”).unbind(“.a”);
同样，如果相同的事件类型设置不同的命名空间，如果仅删除某一个事件处理程序，则只需要指定命名空间即可。
另外，在trigger()方法中，如果事件类型后面附加感叹号，则表示触发不包含命名空间的特定事件类型。
$(“div”).bind(“click”,function(){});
$(“div”).bind(“click.a”,function(){});
$(“div”).trigger(“click!”)//注意click类型后面的感叹号，它将触发第一个注册


<!DOCTYPE HTML>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>警示框</title>
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <script src="http://libs.baidu.com/jquery/1.9.0/jquery.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <style>
        body {
            padding: 110px;
        }

    </style>
    <script>
        $(function () {
            var $ul = $('ul');
            console.log($ul.length);
            var i = $('<i>').attr('title', 'good').text('haha').appendTo($ul);
            $ul.wrapInner('<a></a>')
        })
    </script>
</head>
<body>
<ul></ul>
<ul></ul>
<script type="text/javascript">
    $(function () {
        $('#btn').on("click", f1 = function () {
            $('#test').append("<p>我的绑定函数1</p>");
        }).on("click.a", f2 = function () {
            $('#test').append("<p>我的绑定函数a2</p>");
        }).on("mouseenter", f3 = function () {
            $('#test').append("<p>我的绑定函数3</p>");
        }).on("mouseenter.a", f4 = function () {
            $('#test').append("<p>我的绑定函数a4</p>");
        });
        $('#delAll').click(function () {
            $('#btn').trigger("click");
        });
        $('#delAll2').click(function () {
            $('#btn').trigger("click.a");
        });
        $('#delAll3').click(function () {
            $('#btn').off("click");
        });
        $('#delAll4').click(function () {
            $('#btn').off(".a");
        });

    })
</script>
</head>
<body>
<button id="btn">点击我</button>
<div id="test"></div>
<button id="delAll">删除所有事件</button>
<button id="delAll2">删除所有事件2</button>
<button id="delAll3">删除所有事件3</button>
<button id="delAll4">删除所有事件4</button>
</body>
</body>
</html>

============================================================================================================================

var a=$('<a></a>',{css:{background:'red'},title:'asd',html:123,ba:'bab'}).appendTo('.class')
第一个参数必须是单标签且无内容（？）
var b=$($.parseHTML("<li>1</li><li>3</li><script>alert(9)<\/script>",document,true)).appendTo('.class')
第二个参数是位置（？），第三个参数为true则可以加入js代码

