https://www.jianshu.com/p/dee9f8b14771

Person=function(){}
person1=new Person()

凡是通过 new Function() 创建的对象都是函数对象，其他的都是普通对象。f1,f2,归根结底都是通过 new Function()的方式进行创建的。
Function Object 也都是通过 New Function()创建的。

实例的构造函数属性（constructor）指向构造函数。

每个对象都有 __proto__ 属性，但只有函数对象才有 prototype 属性

在默认情况下，所有的原型对象都会自动获得一个 constructor（构造函数）属性，这个属性（是一个指针）指向 prototype 属性所在的函数（Person）
上面这句话有点拗口，我们「翻译」一下：A 有一个默认的 constructor 属性，这个属性是一个指针，指向 Person。即：
Person.prototype.constructor == Person

实例的构造函数属性（constructor）指向构造函数 ：person1.constructor == Person

person1.constructor == Person
Person.prototype.constructor == Person
person1 为什么有 constructor 属性？那是因为 person1 是 Person 的实例。
那 Person.prototype 为什么有 constructor 属性？？同理， Person.prototype （你把它想象成 A） 也是Person 的实例。
也就是在 Person 创建的时候，创建了一个它的实例对象并赋值给它的 prototype，基本过程如下：
 var A = new Person();
 Person.prototype = A;
结论：原型对象（Person.prototype）是 构造函数（Person）的一个实例。（本句有误！！！！！）

构造函数的原型对象并不是构造函数的一个实例。只是构造函数的一个属性，这个属性是自动获得的。

原型对象其实就是普通对象（但 Function.prototype 除外，它是函数对象，但它很特殊，（本句有误！！！！！）
他没有prototype属性（前面说道函数对象都有prototype属性））。看下面的例子：

 function Person(){};
 console.log(Person.prototype) //Person{}
 console.log(typeof Person.prototype) //Object
 console.log(typeof Function.prototype) // Function，这个特殊
 console.log(typeof Object.prototype) // Object
 console.log(typeof Function.prototype.prototype) //undefined
 
Function.prototype 为什么是函数对象呢？

 var A = new Function ();
 Function.prototype = A;
上文提到凡是通过 new Function( ) 产生的对象都是函数对象。因为 A 是函数对象，所以Function.prototype 是函数对象。

================================================================================================================
https://www.jianshu.com/p/652991a67186

六. 原型链

小测试来检验一下你理解的怎么样：

person1.__proto__ 是什么？
Person.__proto__ 是什么？
Person.prototype.__proto__ 是什么？
Object.__proto__ 是什么？
Object.prototype__proto__ 是什么？
答案：
第一题：
因为 person1.__proto__ === person1 的构造函数.prototype
因为 person1的构造函数 === Person
所以 person1.__proto__ === Person.prototype

第二题：
因为 Person.__proto__ === Person的构造函数.prototype
因为 Person的构造函数 === Function
所以 Person.__proto__ === Function.prototype

第三题：
Person.prototype 是一个普通对象，我们无需关注它有哪些属性，只要记住它是一个普通对象。
因为一个普通对象的构造函数 === Object
所以 Person.prototype.__proto__ === Object.prototype

第四题，参照第二题，因为 Person 和 Object 一样都是构造函数

Object.__proto__==Function.prototype
true

Function.__proto__==Function.prototype
true

第五题：
Object.prototype 对象也有proto属性，但它比较特殊，为 null 。因为 null 处于原型链的顶端，这个只能记住。
Object.prototype.__proto__ === null


